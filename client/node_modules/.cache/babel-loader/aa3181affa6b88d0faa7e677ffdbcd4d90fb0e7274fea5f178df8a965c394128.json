{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/test_task_2/client/src/Routes.jsx\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { AuthData } from \"./AuthWrapper\";\nimport { Auth } from \"../../dsf/src/pages/Auth\";\nimport { ErrorPageNotFound } from \"./pages/ErrorPageNotFound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = [{\n  path: \"/login\",\n  name: \"Login\",\n  element: /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 14\n  }, this),\n  isPrivate: false\n}, {\n  path: \"*\",\n  name: \"Page Not Found\",\n  element: /*#__PURE__*/_jsxDEV(ErrorPageNotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 14\n  }, this),\n  isPrivate: false\n}];\nexport const Routers = () => {\n  const {\n    user\n  } = AuthData();\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: router.forEach((rout, index) => {\n      rout.isPrivate && user.isAuth ? /*#__PURE__*/_jsxDEV(Route, {\n        path: rout.path,\n        element: rout.element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Route, {\n        path: rout.path,\n        element: rout.element\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = Routers;\nvar _c;\n$RefreshReg$(_c, \"Routers\");","map":{"version":3,"names":["Routes","Route","AuthData","Auth","ErrorPageNotFound","jsxDEV","_jsxDEV","router","path","name","element","fileName","_jsxFileName","lineNumber","columnNumber","isPrivate","Routers","user","children","forEach","rout","index","isAuth","_c","$RefreshReg$"],"sources":["/Users/admin/Desktop/test_task_2/client/src/Routes.jsx"],"sourcesContent":["import { Routes, Route } from \"react-router-dom\";\nimport { AuthData } from \"./AuthWrapper\";\nimport { Auth } from \"../../dsf/src/pages/Auth\";\nimport { ErrorPageNotFound } from \"./pages/ErrorPageNotFound\";\n\nconst router = [\n  {\n    path: \"/login\",\n    name: \"Login\",\n    element: <Auth />,\n    isPrivate: false,\n  },\n  {\n    path: \"*\",\n    name: \"Page Not Found\",\n    element: <ErrorPageNotFound />,\n    isPrivate: false,\n  },\n];\n\nexport const Routers = () => {\n  const { user } = AuthData();\n\n  return (\n    <Routes>\n      {router.forEach((rout, index) => {\n        rout.isPrivate && user.isAuth ? (\n          <Route key={index} path={rout.path} element={rout.element} />\n        ) : (\n          <Route key={index} path={rout.path} element={rout.element} />\n        );\n      })}\n    </Routes>\n  );\n};\n"],"mappings":";AAAA,SAASA,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAChD,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,iBAAiB,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,OAAO,eAAEJ,OAAA,CAACH,IAAI;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACjBC,SAAS,EAAE;AACb,CAAC,EACD;EACEP,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,gBAAgB;EACtBC,OAAO,eAAEJ,OAAA,CAACF,iBAAiB;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAC9BC,SAAS,EAAE;AACb,CAAC,CACF;AAED,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAC3B,MAAM;IAAEC;EAAK,CAAC,GAAGf,QAAQ,CAAC,CAAC;EAE3B,oBACEI,OAAA,CAACN,MAAM;IAAAkB,QAAA,EACJX,MAAM,CAACY,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC/BD,IAAI,CAACL,SAAS,IAAIE,IAAI,CAACK,MAAM,gBAC3BhB,OAAA,CAACL,KAAK;QAAaO,IAAI,EAAEY,IAAI,CAACZ,IAAK;QAACE,OAAO,EAAEU,IAAI,CAACV;MAAQ,GAA9CW,KAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2C,CAAC,gBAE7DR,OAAA,CAACL,KAAK;QAAaO,IAAI,EAAEY,IAAI,CAACZ,IAAK;QAACE,OAAO,EAAEU,IAAI,CAACV;MAAQ,GAA9CW,KAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2C,CAC7D;IACH,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEb,CAAC;AAACS,EAAA,GAdWP,OAAO;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}